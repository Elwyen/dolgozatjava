 


Public class GuiForm {
	Private JPanel pnlMain

	Private JFrame form;
	Public GuiForm() {
		Form = new JFrame(‚Äúcime‚Äù)
		Form.setSize(320, 240)
		Form.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		Form.setContenmtPane(pnlMain);

		JMenuItem mnuKilepes = new JMenuItem(‚Äòkilepes‚Äô)
		JMenuItem mnuBetoltes = new JMenuItem(‚Äòbetoltes‚Äô)
		JMenu mnu = new JMenu(‚Äòprogram‚Äô)
		Mnu.add(mnuBetoltes);
Mnu.add(new JSeparator());
Mnu.add(mnuKilepes);
JMenuBar mb = new JMenubar();
Mb.add(mnu);
Form.setJMenuBar(mb);

mnuBetoltes.AddActionListener( {
@Override
Public void actionPerformed(ActionEvent e){
	JFileChooser fc = new JFIleChooser()‚Äô
Int gomb = fc.showOpenDialog(null);
	//mit fog csinalni ez a menu
	Try {List<String> sorok = Files.readAllLines(Path.of(fajl neve))
} catch (IOException ex){
	System.err.println(‚ÄòI/O hiba‚Äô)
	Throw new RuntimeException(ex);
}
}
});

Form.setVisible(true);


}

}


üîß 1. Backend (Laravel) ‚Äì 15 pont
‚úÖ 1.1. Projekt l√©trehoz√°sa (1 pont)
bash
CopyEdit
composer create-project laravel/laravel receptek-api
cd receptek-api
php artisan serve
Els≈ë commit neve:
"init commit ‚Äì Laravel REST API setup"
________________________________________
‚úÖ 1.2. Kateg√≥ria t√°bla l√©trehoz√°sa (2 pont)
bash
CopyEdit
php artisan make:model Kategoria -m
database/migrations/xxxx_xx_xx_create_kategorias_table.php:
php
CopyEdit
public function up()
{
    Schema::create('kategorias', function (Blueprint $table) {
        $table->id();
        $table->string('nev');
        $table->timestamps();
    });
}
bash
CopyEdit
php artisan migrate
________________________________________
‚úÖ 1.3. Receptek t√°bla + kapcsolat (2 pont)
bash
CopyEdit
php artisan make:model Recept -m
database/migrations/...create_recepts_table.php:
php
CopyEdit
public function up()
{
    Schema::create('recepts', function (Blueprint $table) {
        $table->id();
        $table->string('nev');
        $table->text('leiras');
        $table->foreignId('kategoria_id')->constrained('kategorias');
        $table->timestamps();
    });
}
bash
CopyEdit
php artisan migrate
________________________________________
‚úÖ 1.4. Felt√∂lt√©s adatb√°zisba (2 pont)
bash
CopyEdit
php artisan make:seeder KategoriaSeeder
php artisan make:seeder ReceptSeeder
database/seeders/KategoriaSeeder.php:
php
CopyEdit
Kategoria::create(['nev' => 'Leves']);
Kategoria::create(['nev' => 'F≈ë√©tel']);
database/seeders/ReceptSeeder.php:
php
CopyEdit
Recept::create([
    'nev' => 'Guly√°sleves',
    'leiras' => 'Finom magyar leves',
    'kategoria_id' => 1,
]);
bash
CopyEdit
php artisan db:seed --class=KategoriaSeeder
php artisan db:seed --class=ReceptSeeder
________________________________________
‚úÖ 1.5. Recept lek√©rdez√©s kateg√≥ria nev√©vel (2 pont)
Modellekben kapcsolat:
Kategoria.php
php
CopyEdit
public function receptek() {
    return $this->hasMany(Recept::class);
}
Recept.php
php
CopyEdit
public function kategoria() {
    return $this->belongsTo(Kategoria::class);
}
________________________________________
‚úÖ 1.6. Routing (2 pont)
routes/api.php:
php
CopyEdit
Route::get('/receptek', [ReceptekController::class, 'index']);
Route::get('/receptek/szures/{id}', [ReceptekController::class, 'szures']);
Route::get('/kategoriak', [KategoriaController::class, 'index']);
________________________________________
‚úÖ 1.7. Controllerek (2 pont)
bash
CopyEdit
php artisan make:controller ReceptekController
php artisan make:controller KategoriaController
ReceptekController.php
php
CopyEdit
public function index() {
    return Recept::with('kategoria')->get();
}

public function szures($id) {
    return Recept::with('kategoria')->where('kategoria_id', $id)->get();
}
KategoriaController.php
php
CopyEdit
public function index() {
    return Kategoria::all();
}
________________________________________
‚úÖ 1.8. Adatb√°zis export (1 pont)
bash
CopyEdit
mysqldump -u root -p receptek > receptek.sql
Commit neve:
git commit -m "adatbazisexport"
________________________________________
üé® 2. Frontend (React) ‚Äì 15 pont
‚úÖ 2.1. Projekt l√©trehoz√°sa
bash
CopyEdit
npx create-react-app receptek-frontend
cd receptek-frontend
npm install axios
________________________________________
‚úÖ 2.2. Axios be√°ll√≠t√°sa (1 pont)
src/api.js:
js
CopyEdit
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8000/api',
});

export default api;
________________________________________
‚úÖ 2.3. Komponensek (2 pont)
Hozz l√©tre h√°rom komponenst:
‚Ä¢	TablazatReceptek.jsx
‚Ä¢	SorRecept.jsx
‚Ä¢	KategoriaSzuro.jsx
________________________________________
‚úÖ 2.4. Context √©s state (2 pont)
src/context/ReceptContext.jsx:
js
CopyEdit
import { createContext, useState, useEffect } from 'react';
import api from '../api';

export const ReceptContext = createContext();

export const ReceptProvider = ({ children }) => {
  const [receptek, setReceptek] = useState([]);
  const [kategoriak, setKategoriak] = useState([]);
  const [kivalasztottRecept, setKivalasztottRecept] = useState(null);

  useEffect(() => {
    api.get('/receptek').then(res => setReceptek(res.data));
    api.get('/kategoriak').then(res => setKategoriak(res.data));
  }, []);

  return (
    <ReceptContext.Provider value={{
      receptek,
      kategoriak,
      kivalasztottRecept,
      setKivalasztottRecept,
      setReceptek
    }}>
      {children}
    </ReceptContext.Provider>
  );
};
________________________________________
‚úÖ 2.5. Recept √©s kateg√≥ria megjelen√≠t√©s (2 pont)
TablazatReceptek.jsx p√©ld√°ul:
js
CopyEdit
import { useContext } from 'react';
import { ReceptContext } from '../context/ReceptContext';

function TablazatReceptek() {
  const { receptek, setKivalasztottRecept } = useContext(ReceptContext);

  return (
    <table>
      <thead>
        <tr><th>N√©v</th><th>Kateg√≥ria</th></tr>
      </thead>
      <tbody>
        {receptek.map(recept => (
          <tr key={recept.id} onClick={() => setKivalasztottRecept(recept)}>
            <td>{recept.nev}</td>
            <td>{recept.kategoria.nev}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}
________________________________________
‚úÖ 2.6. Kiv√°lasztott recept megjelen√≠t√©se (2 pont)
KivalasztottRecept.jsx:
js
CopyEdit
import { useContext } from 'react';
import { ReceptContext } from '../context/ReceptContext';

function KivalasztottRecept() {
  const { kivalasztottRecept } = useContext(ReceptContext);
  if (!kivalasztottRecept) return null;

  return (
    <div>
      <h2>{kivalasztottRecept.nev}</h2>
      <p>{kivalasztottRecept.leiras}</p>
    </div>
  );
}
________________________________________
‚úÖ 2.7. Kateg√≥ria szerinti sz≈±r√©s (2 pont)
KategoriaSzuro.jsx:
js
CopyEdit
import { useContext } from 'react';
import { ReceptContext } from '../context/ReceptContext';
import api from '../api';

function KategoriaSzuro() {
  const { kategoriak, setReceptek } = useContext(ReceptContext);

  const handleClick = (id) => {
    api.get(`/receptek/szures/${id}`).then(res => setReceptek(res.data));
  };

  return (
    <div>
      {kategoriak.map(k => (
        <button key={k.id} onClick={() => handleClick(k.id)}>{k.nev}</button>
      ))}
    </div>
  );
}
________________________________________
‚úÖ 2.8. App komponens √∂sszerak√°sa
App.jsx:
js
CopyEdit
import { ReceptProvider } from './context/ReceptContext';
import TablazatReceptek from './components/TablazatReceptek';
import KategoriaSzuro from './components/KategoriaSzuro';
import KivalasztottRecept from './components/KivalasztottRecept';

function App() {
  return (
    <ReceptProvider>
      <KategoriaSzuro />
      <TablazatReceptek />
      <KivalasztottRecept />
    </ReceptProvider>
  );
}

export default App;

